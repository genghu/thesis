)
legend("topright", legend = paste0("R2 = "), format(summary(g)$lcavol.r.squared, digits=4))
legend("topright", legend = paste0("R2 = "), format(summary(g)$r.squared, digits=4))
g2 <- lm(lpsa ~ lcavol + lweight + svi + lpph + age + lcp , prostate)
g2 <- lm(lpsa ~ lcavol + lweight + svi + lpph + age + lcp , prostate)
g2 <- lm(lpsa ~ lcavol + lweight + svi + lpph + age + lcp +pgg45, prostate)
g2 <- lm(lpsa ~ lcavol + lweight + svi + lpph + age + lcp +pgg45, prostate)
View(prostate)
View(prostate)
g2 <- lm(lpsa ~ lcavol + lweight + svi + lbph + age + lcp +pgg45, prostate)
summary(g2)
residualPlots(g2)
abline(lm(lpsa ~ lcavol, prostate))
plot(abline(lm(lpsa ~ lcavol, prostate)))
plot(prostate$lcavol, prostate$lpsa, xlab = "lcavol", ylab = "lpsa")
abline(lm(lpsa ~ lcavol, prostate))
plot.window(5, 5)
plot.window(-1:5, -1:5)
plot.window(0:5, 0:5)
plot.window(range(0:5), range(0:5)
)
abline(lm(lpsa ~ lcavol, prostate))
plot(range(0:5), range(0:5))
abline(lm(lpsa ~ lcavol, prostate))
abline(lm(lcavol ~ lpsa, prostate))
plot(range(-1:5), range(-1:5))
abline(lm(lcavol ~ lpsa, prostate))
abline(lm(lpsa ~ lcavol, prostate))
plot(range(-1:10), range(-1:10))
abline(lm(lpsa ~ lcavol, prostate))
abline(lm(lcavol ~ lpsa, prostate))
plot(prostate$lcavol, prostate$lpsa, xlab = "lcavol", ylab = "lpsa")
abline(lm(lpsa ~ lcavol, prostate))
abline(lm(lcavol ~ lpsa, prostate))
data(savings)
savings
g3 <- lm(sr~ pop15 + pop75 + dpi +ddpi, savings)
gummary(g3)
summary(g3)
data(sat)
sat
g4 <- lm(total ~ expend + ratio + salary)
g4 <- lm(total ~ expend + ratio + salary, sat)
summary(g4)
m2 <- lm
m2 <- lm(total ~ expend + ratio + salary + takers, sat)
summary(m2)
anova(g4, m2)
fstat <- (deviance(m2)- deviance(g4))/(deviance(g4)/df.residual(g4))
fstat
1-pf(fstat, 3, df.residual(g4))
fstat <- (deviance(m2)- deviance(g4))/(deviance(m2)/df.residual(m2))
fstat
1-pf(fstat, 4, df.residual(m2))
1-pf(fstat, 1, df.residual(m2))
fstat <- (deviance(g4)- deviance(m2))/(deviance(m2)/df.residual(m2))
fsta
fstat
1-pf(fstat, 1, df.residual(m2))
1-pf(fstat, 4, df.residual(m2))
1-pf(fstat, 3, df.residual(m2))
1-pf(fstat, 2, df.residual(m2))
(tstat <- (1.6379-0)/2.3872)
2*pt(tstat, 45)
gd <- lm(sqrt(total) ~ expend + ratio + salary + takers, sat)
plot(fitted(gd), residuals(gs), xlab="Fitted", ylab="Residuals", main = "Square root Response")
plot(fitted(gd), residuals(gd), xlab="Fitted", ylab="Residuals", main = "Square root Response")
gdd <- lm(total ~ expend + ratio + salary + takers, sat)
library("faraway", lib.loc="~/R/win-library/3.2")
ncvTest(fit)
ncvTest(gdd)
spreadLevelPlot(gdd)
qqPlot(gdd, main="Q-Q Plot")
library(MASS)
sresid <- studres(gdd)
his(sresid, freq=FALSE. main="Distribution of Studentized Residuals")
hist(sresid, freq=FALSE. main="Distribution of Studentized Residuals")
hist(sresid, freq=FALSE, main="Distribution of Studentized Residuals")
xfit<- seq(min(sresid), max(sresid), length=40)
yfit<- dnorm(xfit)
lines(xfit, yfit)
shapiro.test(residuals(gdd))
tl <- row.names(total)
tl <- row.names(sat$total)
halfnorm(influence(gdd)$hat, labs=tl, ylab = "Leverages")
gs <- summary(gdd)
gs$sig
stud <- residuals(g)/(gs$sig*sqrt(1-ginf$hat))
ginf<- influence(gdd)
stud <- residuals(g)/(gs$sig*sqrt(1-ginf$hat))
sum(ginf)
sum(ginf$hat)
qqnorm(stud)
abline(0, 1)
abline(-2, 2)
qqnorm(stud)
jack <- rstudent(gdd)
jack[which.max(abs(jack))]
qt(.05/(50*2), 44)
data(savings)
ssavings
savings
cook <- cooks.distance(gdd)
halfnorm(cook, 3, labs=countries, ylab="Cook's distance")
halfnorm(cook, 3, labs=tl, ylab="Cook's distance")
av.plots(gdd)
cutoff <- 4/((nrow(sat)-length(gdd$coefficients)-2))
plot(gdd, which=4, cook.levels = cutoff)
influencePlot(gdd, id.method = "identify", main="Influence Plot")
influencePlot(gdd, id.method = "identify", main="Influence Plot", sub="Circle size is proportial to Cook's Distance")
influencePlot(gdd, id.method = "identify", main="Influence Plot", sub="Circle size is proportial to Cook's Distance")
)
influencePlot(gdd, id.method = "identify", main="Influence Plot", sub="Circle size is proportial to Cook's Distance")
d <- residuals(lm(total ~ expend + ratio + salary + takers, sat))
m <- residuals(lm(takers ~ expend + ratio + salary + takers, sat))
m <- residuals(lm(takers ~ expend + ratio + salary, sat))
plot(m, d, xlab = "takers residuals", ylab="SAT residuals")
coef(lm(d ~ m))
coef(gdd)
abline(0, coef(gdd)['takers'])
data(cornnit)
cornnit
cornnit <- cbind(cornnit, cornnit$nitrogen^2)
c1 <- lm(yield ~ nitrogen, cornnit)
summary(c1)
c2 <- lm(yield ~ nitrogen^2)
c2 <- lm(yield ~ nitrogen^2, cornnit)
summary(c2)
c3 <- lm(yield ~ log(nitrogen), cornnit)
c3 <- lm(yield ~ log(nitrogen), cornnit)
View(cornnit)
View(cornnit)
cornnit <- cbind(cornnit, log(cornnit$nitrogen)
)
c3 <- lm(yield ~ log(cornnit$nitrogen), cornnit)
c3 <- lm(yield ~ 1/nitrogen, cornnit)
summary(c3)
c4 <- lm(yield ~ sqrt(nitrogen), cornnit)
summary(c4)
c5 <- lm(yield ~ log10(nitrogen), cornnit)
c5 <- lm(yield ~ exp(nitrogen), cornnit)
summary(c5)
data(cornnit)
c <- lm(yield ~ nitrogen, cornnit)
boxcox(c, plotit = T)
boxcox(c, plotit = T, lambda = seq(0.5, 1.5, by=0.1))
boxcox(c, plotit = T, lambda = seq(0.5, 5, by=0.5))
boxcox(c, plotit = T)
lambda
boxcox(c, plotit = T, lambda = seq(0.5, 5, by=0.5))
cc <- lm(yield ~ nitrogen^3, cornnit)
summary(cc)
cc <- lm(yield^3 ~ nitrogen, cornnit)
summary(cc)
cc <- lm(yield^2 ~ nitrogen, cornnit)
summary(cc)
cc <- lm(yield^4 ~ nitrogen, cornnit)
summary(cc)
cc <- lm(yield^2.8 ~ nitrogen, cornnit)
summary(cc)
boxcox(c, plotit = T)
boxcox(c, plotit = T, lambda = seq(0.5, 5, by=0.5))
boxcox(c, plotit = T, lambda = seq(0.5, 5, by=0.1))
boxcox(c, plotit = T, lambda = seq(0.5, 5, by=0.01))
cc1 <- lm(yield^2.8 ~ nitrogen, cornnit)
summary(cc1)
summary(cc2<-lm(yield ~sqrt(nitrogen), cornnit))
summary(cc2<-lm(yield^2 ~nitrogen, cornnit))
data(ozone )
ozone
oz <- lm(o3 ~ temp + humidity + ibh, ozone)
oz <- lm(O3 ~ temp + humidity + ibh, ozone)
summary(oz)
boxcox(oz, plotit = T)
boxcox(oz, plotit = T, lambda=seq (0.0, 0.5, by=0.01))
data(cornnit)
co <- lm(yield ~ nitrogen, cornnit)
boxcox
boxcox(co, plotit = T)
boxCox(co, plotit = T, lambda=seq (0.0, 5, by=0.5))
co1 <- lm(yield ~ sqrt(nitrogen), cornnit)
summary(co1)
co1 <- lm(yield ~ nitrogen^(1/3), cornnit)
library("kst", lib.loc="~/R/win-library/3.2")
#CONSTRUCT A KNOWLEDGE STRUCTURE AND CONVERT IT TO A KNOWLEDGE SPACE
kst<-kstructure(set(set("a"), set("a", "b"), set("a","c"), set("a","b","c")))
ksp <- kspace(kst)
ksp
#PLOT THE KNOWLEDGE SPACE
if(require("Rgraphviz")){plot(ksp)}
#GET THE BASE THE KNOWLEDGE SPACE
domain
atoms <- katoms(ksp, items=domain)    #{{a}}
atoms
kb <- kbase(ksp)
kb
df_10 <- read.csv(file = "C:\\Users\\Shi\\Desktop\\MachineLearning\\hw1\\d-100.csv", header = TRUE)
weight_num <- length(df_10)-1
row_length <- length(df_10[1,])
weight_vector <- runif(weight_num)
l_rate = 0.1
nIter = 100
class_val <- 'S'
bias <- runif(1)
row_num <- nrow(df_10)
N <- length(df_10[,1])
for(i in 1:nIter){
error <- 0
for(n in 1:N){
print(c(i, n))
out <- rep(0, weight_num)
for(r in 1:weight_num){
out[r] <- df_10[n,r] * weight_vector[r]
}
y<- sum(out) + bias
if(y>0){
class_val <- 'S'
}else{
class_val <- 'NS'
}
cls <- df_10[n, 101]
if(class_val != cls){
error <- error + 1
for(j in 1:length(weight_vector)){
delta_w <- l_rate * (cls - class_val) * df_10[n, j]
weight_vector[j] <- weight_vector[j] + delta_w
}
}
}
}
err <- error/row_num
print(err)
print(weight_vector)
warnings()
df_10 <- read.csv(file = "C:\\Users\\Shi\\Desktop\\MachineLearning\\hw1\\d-100.csv", header = TRUE)
weight_num <- length(df_10)-1
row_length <- length(df_10[1,])
weight_vector <- runif(weight_num)
l_rate = 0.1
nIter = 100
class_val <- 1
bias <- runif(1)
row_num <- nrow(df_10)
N <- length(df_10[,1])
for(i in 1:nIter){
error <- 0
for(n in 1:N){
print(c(i, n))
out <- rep(0, weight_num)
for(r in 1:weight_num){
out[r] <- df_10[n,r] * weight_vector[r]
}
y<- sum(out) + bias
if(y>0){
class_val <- 1
}else{
class_val <- -1
}
cls <- df_10[n, 101]
if(class_val != cls){
error <- error + 1
for(j in 1:length(weight_vector)){
delta_w <- l_rate * (cls - class_val) * df_10[n, j]
weight_vector[j] <- weight_vector[j] + delta_w
}
}
}
}
df_10 <- read.csv(file = "C:\\Users\\Shi\\Desktop\\MachineLearning\\hw1\\d-100.csv", header = TRUE)
weight_num <- length(df_10)-1
row_length <- length(df_10[1,])
weight_vector <- runif(weight_num)
l_rate = 0.1
nIter = 10
class_val <- 1
bias <- runif(1)
row_num <- nrow(df_10)
N <- length(df_10[,1])
for(i in 1:nIter){
error <- 0
for(n in 1:N){
print(c(i, n))
out <- rep(0, weight_num)
for(r in 1:weight_num){
out[r] <- df_10[n,r] * weight_vector[r]
}
y<- sum(out) + bias
if(y>0){
class_val <- 1
}else{
class_val <- -1
}
cls <- df_10[n, row_num]
if(class_val != cls){
error <- error + 1
for(j in 1:length(weight_vector)){
delta_w <- l_rate * (cls - class_val) * df_10[n, j]
weight_vector[j] <- weight_vector[j] + delta_w
}
}
}
}
err <- error/row_num
print(err)
print(weight_vector)
df_10 <- read.csv(file = "C:\\Users\\Shi\\Desktop\\MachineLearning\\hw1\\d-100.csv", header = TRUE)
weight_num <- length(df_10)-1
row_length <- length(df_10[1,])
weight_vector <- runif(weight_num)
l_rate = 0.1
nIter = 10
class_val <- 1
bias <- runif(1)
row_num <- nrow(df_10)
N <- length(df_10[,1])
for(i in 1:nIter){
error <- 0
for(n in 1:N){
print(c(i, n))
out <- rep(0, weight_num)
for(r in 1:weight_num){
out[r] <- df_10[n,r] * weight_vector[r]
}
y<- sum(out) + bias
if(y>0){
class_val <- 1
}else{
class_val <- -1
}
cls <- df_10[n, weight_num+1]
if(class_val != cls){
error <- error + 1
for(j in 1:length(weight_vector)){
delta_w <- l_rate * (cls - class_val) * df_10[n, j]
weight_vector[j] <- weight_vector[j] + delta_w
}
}
}
}
err <- error/row_num
print(err)
print(weight_vector)
ln(24502550)
lgo
log2(24502550)
log(24502550, base = exp(1))
log(1/0.05, base = exp(1))
log(1065369600, base = exp(1))
log(10, base = exp(1))
log(1065369600, base = exp(1)) + log(10, base = exp(1))
(log(1065369600, base = exp(1)) + log(10, base = exp(1)))*20
4*log(2/0.05, base)
4*log(2/0.05, base = exp(1))
4*log2(2/0.05)
4*log2(2/0.1)+32*log2(13/0.05)
(4*log2(2/0.1)+32*log2(13/0.05))*20
help(logit)
??logit
??read.table
data1 <- read.table("C:\Users\Shi\Desktop\CSAL\ds2074_student_step_2017_0415_134512\ds2074_student_step_All_Data_121_2017_0415_134506.txt", header = T)
data1 <- read.table("C:\\Users\\Shi\\Desktop\\CSAL\\ds2074_student_step_2017_0415_134512\\ds2074_student_step_All_Data_121_2017_0415_134506.txt", header = T)
data1 <- read.table("C:\\Users\\Shi\\Desktop\\CSAL\\ds2074_student_step_2017_0415_134512\\ds2074_student_step_All_Data_121_2017_0415_134506.txt", header = T)
data1 <- read.table("C:\\Users\\Shi\\Desktop\\CSAL\\ds2074_student_step_2017_0415_134512\\ds2074_student_step_All_Data_121_2017_0415_134506.txt", header = T)
help(apply)
#generate all the permuations containing 1-10
permutations <- function(n){
if(n==1){
return(matrix(1))
} else {
sp <- permutations(n-1)
p <- nrow(sp)
A <- matrix(nrow=n*p,ncol=n)
for(i in 1:n){
A[(i-1)*p+1:p,] <- cbind(i,sp+(sp>=i))
}
return(A)
}
}
#convert each row to x[m,1]+|x[m,1]-x[m,2]|+...+|x[m,9]-x[m,10]|
value<-function(coin){
n<-1:10
m<-1:3628800
coin[m,1]<-coin[m,1]
for(n in 2:10)
{coin[m,n]<-abs(coin[m,n]-coin[m,n-1])}
}
#main codes
coin<-matrix(permutations(10),ncol=10)
coin
coinvalue<-apply(coin,1,value)
coinvalue
x <- cbind(x1 = 3, x2 = c(4:1, 2:5))
x
dimnames(x)[[1]] <- letters[1:8]
x
apply(x, 2, mean, trim = .2)
col.sums <- apply(x, 2, sum)
row.sums <- apply(x, 1, sum)
rbind(cbind(x, Rtot = row.sums), Ctot = c(col.sums, sum(col.sums)))
help(matrix)
matrix(1)
#generate all the permuations containing 1-10
permutations <- function(n){
if(n==1){
return(matrix(1))
} else {
sp <- permutations(n-1)
p <- nrow(sp)
A <- matrix(nrow=n*p,ncol=n)
for(i in 1:n){
A[(i-1)*p+1:p,] <- cbind(i,sp+(sp>=i))
}
return(A)
}
}
#convert each row to x[m,1]+|x[m,1]-x[m,2]|+...+|x[m,9]-x[m,10]|
value<-function(coin){
n<-1:10
m<-1:3628800
coin[m,1]<-coin[m,1]
for(n in 2:10){
coin[m,n]<-abs(coin[m,n]-coin[m,n-1])
}
}
#main codes
coin<-matrix(permutations(10),ncol=10)
coin
coinvalue<-apply(coin,1,value)
coinvalue
#generate all the permuations containing 1-10
permutations <- function(n){
if(n==1){
return(matrix(1))
} else {
sp <- permutations(n-1)
p <- nrow(sp)
A <- matrix(nrow=n*p,ncol=n)
for(i in 1:n){
A[(i-1)*p+1:p,] <- cbind(i,sp+(sp>=i))
}
return(A)
}
permutations <- function(n){
if(n==1){
return(matrix(1))
} else {
sp <- permutations(n-1)
p <- nrow(sp)
A <- matrix(nrow=n*p,ncol=n)
for(i in 1:n){
A[(i-1)*p+1:p,] <- cbind(i,sp+(sp>=i))
}
return(A)
}
}
#main codes
coin<-matrix(permutations(10),ncol=10)
coin
oinvalue<-apply(coin,1,value)
coinvalue
#generate all the permuations containing 1-10
permutations <- function(n){
if(n==1){
return(matrix(1))
} else {
sp <- permutations(n-1)
p <- nrow(sp)
A <- matrix(nrow=n*p,ncol=n)
for(i in 1:n){
A[(i-1)*p+1:p,] <- cbind(i,sp+(sp>=i))
}
return(A)
}
}
#main codes
coin<-matrix(permutations(10),ncol=10)
coin
help("nrow")
permu_x <- permutations(10)
library("kst", lib.loc="~/R/win-library/3.2")
A <- matrix
A <- matrix(c(2,1,0,0,4,3,0,0), nrow=4, ncol=2)
A
t(A)
At <- t(A)
A%*%At
svd_A <- svd(A)
svd_A
t(svd_A$u)%*%svd_A$u
X <- matrix(c(0,1,1,0), nrow=2)
X
X <- matrix(c(2,0,0,3), nrow=2)
X
eigen(X)
A <- matrix(c(1,0,-1,1,1,1), nrow = 3)
A
svd(A)
eigen(t(t(A)%*%A))
t(A)%*%A
eigen(t(A)%*%A)
t(eigen(t(A)%*%A))
install.packages("gdata")
library(gdata)
library(gdata)
library(gdata)
library(gdata)
setwd("C:\Users\Shi\Desktop\thesis\")
setwd("C:\\Users\\Shi\\Desktop\\thesis\\")
weibo <- read.xls("weibo.xlxs", sheet = 1)
weibo <- read.xls("weibo.xlxs", sheet = 1)
weibo <- read.xls("weibo.xlsx", sheet = 1)
weibo <- read.xls("weibo.xlsx", sheet = 1)
